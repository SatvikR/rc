/* Wraps the read syscall. */
u64 read(i32 fd, ptr64 buf, u64 count) {
	return SYSCALL_3(0, fd, buf, count);
}

/* Wraps the write syscall. */
u64 write(i32 fd, ptr64 buf, u64 count) {
	return SYSCALL_3(1, fd, buf, count);
}

/* Wraps the open syscall. */
i32 open(ptr64 filename, i32 flags, u32 mode) {
	return SYSCALL_3(2, filename, flags, mode);
}

/* Wraps the close syscall. */
i32 close(i32 fd) {
	return SYSCALL_1(3, fd);
}

/* Wraps the lseek syscall. */
i64 lseek(i32 fd, i64 offset, i32 whence) {
	return SYSCALL_3(8, fd, offset, whence);
}


/* Counts the length of a string. */
u64 strlen(ptr64 str) {
	ptr64 p = str;
	u64 size = 0;
	while (1) {
		i8 c => p;
		if (c == 0) break;

		size = size + 1;
		p = p + 1;
	}
	return size;
}

/* Writes a string to stdout. */
u64 puts(ptr64 str) {
	return write(1, str, strlen(str));
}

/* Writes a character to stdout */
u64 putc(i8 char) {
	return write(1, &char, 1);
}

const O_RDONLY = 0;
const O_WRONLY = 1;
const O_RDWR = 2;
const O_CREAT = 64;
const O_TRUNC = 512;
const O_APPEND = 1024;
const O_NONBLOCK = 2048;

i32 fopen(ptr64 filename, i32 flags, u32 mode) {
	return open(filename, flags, mode);
}

i32 fclose(i32 fd) {
	return close(fd);
}

i32 fread(i32 fd, ptr64 buf, u64 count) {
	return read(fd, buf, count);
}

const SEEK_SET = 0;
const SEEK_CUR = 1;
const SEEK_END = 2;

i64 fseek(i32 fd, i64 offset, i32 whence) {
	return lseek(fd, offset, whence);
}

u64 fwrite(i32 fd, ptr64 str) {
	return write(fd, str, strlen(str));
}